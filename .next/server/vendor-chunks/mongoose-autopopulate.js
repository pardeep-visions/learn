"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongoose-autopopulate";
exports.ids = ["vendor-chunks/mongoose-autopopulate"];
exports.modules = {

/***/ "(rsc)/./node_modules/mongoose-autopopulate/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongoose-autopopulate/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function autopopulatePlugin(schema, options) {\n  const pathsToPopulate = getPathsToPopulate(schema);\n\n  let testFunction = () => true;\n  if (options != null && (Array.isArray(options.functions) || options.functions instanceof RegExp)) {\n    let _functions = options.functions;\n    if (Array.isArray(_functions)) {\n      _functions = new Set(_functions);\n\n      testFunction = v => _functions.has(v);\n    } else {\n      testFunction = v => _functions.test(v);\n    }\n  }\n\n  const autopopulateHandler = function(filter) {\n    const finalPaths = [];\n\n    if (this._mongooseOptions &&\n        this._mongooseOptions.lean &&\n        // If lean and user didn't explicitly do `lean({ autopopulate: true })`,\n        // skip it. See gh-27, gh-14, gh-48\n        !this._mongooseOptions.lean.autopopulate) {\n      return;\n    }\n\n    const options = this.options || {};\n    if (options.autopopulate === false) {\n      return;\n    }\n\n    if (options.autopopulate && options.autopopulate.maxDepth) {\n      options.maxDepth = options.autopopulate.maxDepth;\n    }\n\n    const depth = options._depth != null ? options._depth : 0;\n\n    if (options.maxDepth > 0 && depth >= options.maxDepth) {\n      return;\n    }\n\n    const numPaths = pathsToPopulate.length;\n    for (let i = 0; i < numPaths; ++i) {\n      pathsToPopulate[i].options = pathsToPopulate[i].options || {};\n      if (typeof filter === 'function' && !filter(pathsToPopulate[i].options)) {\n        continue;\n      }\n      pathsToPopulate[i].options.options = pathsToPopulate[i].options.options || {};\n\n      const newOptions = { _depth: depth + 1 };\n      if (options.maxDepth) newOptions.maxDepth = options.maxDepth;\n      Object.assign(pathsToPopulate[i].options.options, newOptions);\n\n      const optionsToUse = processOption.call(this,\n        pathsToPopulate[i].autopopulate, pathsToPopulate[i].options);\n      if (optionsToUse) {\n        // If `this` is a query, population chaining is allowed.\n        // If not, add it to an array for single population at the end.\n        if (this.constructor.name === 'Query') {\n          this.populate(optionsToUse);\n        } else {\n          finalPaths.push(optionsToUse);\n        }\n      }\n    }\n\n    return finalPaths;\n  };\n\n  if (testFunction('find')) {\n    schema.pre('find', function() { return autopopulateHandler.call(this); });\n    schema.post('find', function(res) { return autopopulateDiscriminators.call(this, res); });\n  }\n  if (testFunction('findOne')) {\n    schema.pre('findOne', function() { return autopopulateHandler.call(this); });\n    schema.post('findOne', function(res) { return autopopulateDiscriminators.call(this, res); });\n  }\n  if (testFunction('findOneAndUpdate')) {\n    schema.pre('findOneAndUpdate', function() { return autopopulateHandler.call(this); });\n    schema.post('findOneAndUpdate', function(res) { return autopopulateDiscriminators.call(this, res); });\n  }\n  if (testFunction('findOneAndDelete')) {\n    schema.pre('findOneAndDelete', function() { return autopopulateHandler.call(this); });\n    schema.post('findOneAndDelete', function(res) { return autopopulateDiscriminators.call(this, res); });\n  }\n  if (testFunction('findOneAndReplace')) {\n    schema.pre('findOneAndReplace', function() { return autopopulateHandler.call(this); });\n    schema.post('findOneAndReplace', function(res) { return autopopulateDiscriminators.call(this, res); });\n  }\n  if (testFunction('save')) {\n    schema.post('save', function() {\n      if (pathsToPopulate.length === 0) {\n        return Promise.resolve();\n      }\n      // Skip for subdocs, because we assume this function only runs on\n      // top-level documents.\n      if (typeof this.ownerDocument === 'function' && this.$isSubdocument) {\n        return Promise.resolve();\n      }\n      const finalPaths = autopopulateHandler.call(this, options => {\n        const pop = this.populated(options.path);\n        if (Array.isArray(pop)) {\n          const docVal = this.get(options.path);\n          return docVal == null ||\n            pop.length !== docVal.length ||\n            pop.some(v => v == null);\n        }\n        return true;\n      });\n      return this.populate(finalPaths);\n    });\n  }\n};\n\nfunction autopopulateDiscriminators(res) {\n  if (res == null) {\n    return;\n  }\n  if (this._mongooseOptions != null && this._mongooseOptions.lean) {\n    // If lean, we don't have a good way to figure out the discriminator\n    // schema, and so skip autopopulating.\n    return;\n  }\n  if (!Array.isArray(res)) {\n    res = [res];\n  }\n\n  const discriminators = new Map();\n  for (const doc of res) {\n    if (doc.constructor.baseModelName != null) {\n      const discriminatorModel = doc.constructor;\n      const modelName = discriminatorModel.modelName;\n\n      if (!discriminators.has(modelName)) {\n        const pathsToPopulate = getPathsToPopulate(discriminatorModel.schema).\n          filter(p => !doc.populated(p.options.path));\n\n        discriminators.set(modelName, {\n          model: discriminatorModel,\n          docs: [],\n          pathsToPopulate: pathsToPopulate\n        });\n      }\n      const modelMap = discriminators.get(modelName);\n      modelMap.docs.push(doc);\n    }\n  }\n\n  return Promise.all(Array.from(discriminators.values()).map(modelMap => {\n    const pathsToPopulate = modelMap.pathsToPopulate.\n      map(p => processOption.call(this, p.autopopulate, p.options)).\n      filter(v => !!v);\n    return modelMap.model.populate(modelMap.docs, pathsToPopulate);\n  }));\n}\n\nfunction getPathsToPopulate(schema) {\n  const pathsToPopulate = [];\n  const schemaStack = new WeakMap();\n  eachPathRecursive(schema, function(pathname, schemaType) {\n    let option;\n    if (schemaType.options && schemaType.options.autopopulate) {\n      option = schemaType.options.autopopulate;\n      pathsToPopulate.push({\n        options: defaultOptions(pathname, schemaType.options),\n        autopopulate: option\n      });\n    } else if (schemaType.options &&\n        schemaType.options.type &&\n        schemaType.options.type[0] &&\n        schemaType.options.type[0].autopopulate) {\n      option = schemaType.options.type[0].autopopulate;\n      pathsToPopulate.push({\n        options: defaultOptions(pathname, schemaType.options.type[0]),\n        autopopulate: option\n      });\n    }\n  }, null, schemaStack);\n\n  return pathsToPopulate;\n}\n\nfunction defaultOptions(pathname, v) {\n  const ret = { path: pathname, options: { maxDepth: 10 } };\n  if (v.ref != null) {\n    ret.model = v.ref;\n    ret.ref = v.ref;\n  }\n  if (v.refPath != null) {\n    ret.refPath = v.refPath;\n  }\n  return ret;\n}\n\nfunction processOption(value, options) {\n  switch (typeof value) {\n    case 'function':\n      return handleFunction.call(this, value, options);\n    case 'object':\n      return handleObject.call(this, value, options);\n    default:\n      return handlePrimitive.call(this, value, options);\n  }\n}\n\nfunction handlePrimitive(value, options) {\n  if (value) {\n    return options;\n  }\n}\n\nfunction handleObject(value, optionsToUse) {\n  // Special case: support top-level `maxDepth`\n  if (value.maxDepth != null) {\n    optionsToUse.options = optionsToUse.options || {};\n    optionsToUse.options.maxDepth = value.maxDepth;\n    delete value.maxDepth;\n  }\n  optionsToUse = Object.assign({}, optionsToUse, value);\n\n  return optionsToUse;\n}\n\nfunction handleFunction(fn, options) {\n  const val = fn.call(this, options);\n  return processOption.call(this, val, options);\n}\n\nfunction eachPathRecursive(schema, handler, path, schemaStack) {\n\n  if (schemaStack.has(schema)) {\n    return;\n  }\n  if (!path) {\n    path = [];\n  }\n  schemaStack.set(schema, true);\n\n  schema.eachPath(function(pathname, schemaType) {\n    path.push(pathname);\n    if (schemaType.schema) {\n      eachPathRecursive(schemaType.schema, handler, path, schemaStack);\n\n      if (schemaType.schema.discriminators != null) {\n        for (const discriminatorName of Object.keys(schemaType.schema.discriminators)) {\n          eachPathRecursive(\n            schemaType.schema.discriminators[discriminatorName],\n            handler,\n            path,\n            schemaStack\n          );\n        }\n      }\n    } else if (schemaType.$isMongooseArray && schemaType.$embeddedSchemaType.$isMongooseArray) {\n      while (schemaType != null && schemaType.$isMongooseArray && !schemaType.$isMongooseDocumentArray) {\n        schemaType = schemaType.$embeddedSchemaType;\n      }\n      if (schemaType != null && schemaType.$isMongooseDocumentArray) {\n        eachPathRecursive(schemaType.schema, handler, path, schemaStack);\n\n        if (schemaType.schema.discriminators != null) {\n          for (const discriminatorName of Object.keys(schemaType.schema.discriminators)) {\n            eachPathRecursive(\n              schemaType.schema.discriminators[discriminatorName],\n              handler,\n              path,\n              schemaStack\n            );\n          }\n        }\n      }\n    } else {\n      handler(path.join('.'), schemaType);\n    }\n    path.pop();\n  });\n  schemaStack.delete(schema);\n  if (schema.virtuals) {\n    Object.keys(schema.virtuals).forEach(function(pathname) {\n      path.push(pathname);\n      handler(path.join('.'), schema.virtuals[pathname]);\n      path.pop();\n    });\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mongoose-autopopulate/index.js\n");

/***/ })

};
;